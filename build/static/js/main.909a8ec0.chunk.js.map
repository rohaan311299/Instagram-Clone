{"version":3,"sources":["firebase.js","components/Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","unsubscribe","className","Avatar","alt","src","type","value","placeholder","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","rand","random","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","React","modalStyle","posts","setPosts","open","setOpen","setUsername","email","setEmail","password","setPassword","setUser","openSignin","setOpenSignIn","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","signInWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAaMA,GAXYC,IAASC,cAAc,CACrCC,OAAQ,0CACRC,WAAY,8CACZC,YAAa,qDACbC,UAAW,8BACXC,cAAe,0CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGVT,IAASU,aACZC,EAAKX,IAASW,OACdC,EAAQZ,IAASY,UCuERC,MAhFf,YAAwD,IAAzCC,EAAwC,EAAxCA,OAAOC,EAAiC,EAAjCA,KAAKC,EAA4B,EAA5BA,SAASC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,SAAW,EACtBC,mBAAS,IADa,mBAC5CC,EAD4C,KACnCC,EADmC,OAEzBF,qBAFyB,mBAE7CG,EAF6C,KAErCC,EAFqC,KAgCnD,OA5BAC,qBAAU,WAEN,GAAGV,EACmBf,EACb0B,WAAW,SACXC,IAAIZ,GACJW,WAAW,YACXE,QAAQ,YAAY,QACpBC,YAAW,SAACC,GACTR,EAAYQ,EAASC,KAAKC,KAAI,SAACL,GAAD,OAAOA,EAAIM,cAIrD,OAAM,iBAZFC,QAeN,CAACnB,IAaC,yBAAKoB,UAAU,QACX,yBAAKA,UAAU,eAEX,kBAACC,EAAA,EAAD,CACID,UAAU,cACVE,IAAI,gBACJC,IAAI,gCAER,4BAAKrB,IAIT,yBAAKkB,UAAU,aAAaG,IAAKnB,EAAUkB,IAAI,KAE/C,wBAAIF,UAAU,aAAY,gCAASlB,EAAT,KAA6BC,GAEvD,yBAAKiB,UAAU,iBACVd,EAASW,KAAI,SAACT,GAAD,OACV,2BACI,gCAASA,EAAQN,UADrB,IACyCM,EAAQF,cAIxDL,GACG,0BAAMmB,UAAU,mBACZ,2BACIA,UAAU,aACVI,KAAK,OACLC,MAAOjB,EACPkB,YAAY,mBACZC,SAAU,SAACC,GAAD,OAAKnB,EAAWmB,EAAEC,OAAOJ,UAEvC,4BACIL,UAAU,cACVU,UAAWtB,EACXgB,KAAK,SACLO,QA/CF,SAACC,GACfA,EAAMC,iBACNhD,EAAG0B,WAAW,SAASC,IAAIZ,GAAQW,WAAW,YAAYuB,IAAI,CAC1D5B,SAASE,EACTN,SAASD,EAAKkC,YACdC,UAAUlD,IAASU,UAAUyC,WAAWC,oBAE5C7B,EAAW,MAoCC,W,sCCHL8B,MA9Df,YAAkC,IAAZrC,EAAW,EAAXA,SAAW,EACNG,mBAAS,MADH,mBACtBmC,EADsB,KAChBC,EADgB,OAEApC,mBAAS,GAFT,mBAEtBqC,EAFsB,KAEbC,EAFa,OAGFtC,mBAAS,IAHP,mBAGtBF,EAHsB,KAGdyC,EAHc,KAoD7B,OACI,yBAAKxB,UAAU,eACX,8BAAUA,UAAU,uBAAuBK,MAAOiB,EAAUG,IAAI,QAChE,2BAAOrB,KAAK,OAAOE,YAAY,qBAAqBC,SAAU,SAAAK,GAAK,OAAEY,EAAWZ,EAAMH,OAAOJ,QAAQA,MAAOtB,IAC5G,2BAAOqB,KAAK,OAAOG,SAnDR,SAACC,GACbA,EAAEC,OAAOiB,MAAM,IACdL,EAASb,EAAEC,OAAOiB,MAAM,OAkDxB,kBAACC,EAAA,EAAD,CAAQhB,QA9CG,WACEjC,EAAQkD,IAAR,iBAAsBR,EAAMS,OAAQC,IAAIV,GAC9CW,GACP,iBACA,SAACpC,GAEG,IAAM2B,EAASU,KAAKC,MACftC,EAASuC,iBAAiBvC,EAASwC,WAAY,KAEpDZ,EAAYD,MAEhB,SAACc,GAEGC,QAAQC,IAAIF,GACZG,MAAMH,EAAMI,YAEhB,WAGI9D,EACKkD,IAAI,UACJa,MAAMrB,EAAMS,MACZa,iBACAC,MAAK,SAAAC,GAEF/E,EAAG0B,WAAW,SAASuB,IAAI,CACvBE,UAAUlD,IAASU,UAAUyC,WAAWC,kBACxCnC,QAAQA,EACRC,SAAS4D,EACT9D,SAASA,IAIbyC,EAAY,GACZC,EAAW,IACXH,EAAS,cAWrB,Y,QCrDZ,SAASwB,IACP,OAAOb,KAAKC,MAAsB,GAAhBD,KAAKc,UAAiB,GAG1C,SAASC,IACP,IAAMC,EAAM,GAAKH,IACXI,EAAO,GAAKJ,IAElB,MAAO,CACLG,IAAI,GAAD,OAAKA,EAAL,KACHC,KAAK,GAAD,OAAKA,EAAL,KACJC,UAAU,cAAD,OAAgBF,EAAhB,eAA0BC,EAA1B,OAIb,IAAME,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAG,EAAG,QAwLlBC,MApLf,WACE,IAAMC,EAAQf,IADD,EAEMgB,IAAMlF,SAAS8D,GAA3BqB,EAFM,sBAGUnF,mBAAS,IAHnB,mBAGNoF,EAHM,KAGAC,EAHA,OAIQrF,oBAAS,GAJjB,mBAINsF,EAJM,KAIDC,EAJC,OAKgBvF,mBAAS,IALzB,mBAKNH,EALM,KAKG2F,EALH,OAMUxF,mBAAS,IANnB,mBAMNyF,EANM,KAMAC,EANA,OAOgB1F,mBAAS,IAPzB,mBAON2F,EAPM,KAOGC,EAPH,OAQQ5F,mBAAS,MARjB,mBAQNJ,EARM,KAQDiG,EARC,OASoB7F,oBAAS,GAT7B,mBASN8F,EATM,KASKC,EATL,KA0Db,OA/CA1F,qBAAU,WACR,IAAMS,EAAatB,EAAKwG,oBAAmB,SAACC,GACvCA,GAED7C,QAAQC,IAAI4C,GACZJ,EAAQI,IAGRJ,EAAQ,SAGZ,OAAO,WAGL/E,OAEF,CAAClB,EAAKC,IAERQ,qBAAU,WAGRzB,EAAG0B,WAAW,SAASE,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAC5D2E,EAAS3E,EAASC,KAAKC,KAAI,SAAAL,GAAG,MAAG,CAC/B2F,GAAG3F,EAAI2F,GACPC,KAAK5F,EAAIM,iBAEb,IAsBA,yBAAKE,UAAU,OACb,kBAACqF,EAAA,EAAD,CACEd,KAAMA,EACNe,QAAS,kBAAId,GAAQ,KAErB,yBAAKe,MAAOnB,EAAYpE,UAAWkE,EAAQZ,OACzC,0BAAMtD,UAAU,cACd,gCACE,yBACEA,UAAU,kBACVG,IAAI,2FACJD,IAAI,MAIR,kBAACsF,EAAA,EAAD,CACElF,YAAY,WACZF,KAAK,OACLC,MAAOvB,EACPyB,SAAU,SAACC,GAAD,OAAKiE,EAAYjE,EAAEC,OAAOJ,UAEtC,kBAACmF,EAAA,EAAD,CACElF,YAAY,QACZF,KAAK,OACLC,MAAOqE,EACPnE,SAAU,SAACC,GAAD,OAAKmE,EAASnE,EAAEC,OAAOJ,UAEnC,kBAACmF,EAAA,EAAD,CACElF,YAAY,WACZF,KAAK,OACLC,MAAOuE,EACPrE,SAAU,SAACC,GAAD,OAAKqE,EAAYrE,EAAEC,OAAOJ,UAEtC,kBAACsB,EAAA,EAAD,CAAQvB,KAAK,SAASO,QArDnB,SAACC,GACZA,EAAMC,iBACNpC,EAAKgH,+BAA+Bf,EAAME,GACzCjC,MAAK,SAACuC,GACL,OAAOA,EAASrG,KAAK6G,cAAc,CACjC3E,YAAYjC,OAGf6G,OAAM,SAACvD,GAAD,OAASG,MAAMH,EAAMI,YAC5BgC,GAAQ,KA4CA,cAKN,kBAACa,EAAA,EAAD,CACEd,KAAMQ,EACNO,QAAS,kBAAIN,GAAc,KAE3B,yBAAKO,MAAOnB,EAAYpE,UAAWkE,EAAQZ,OACzC,0BAAMtD,UAAU,cACd,gCACE,yBACEA,UAAU,kBACVG,IAAI,2FACJD,IAAI,MAIR,kBAACsF,EAAA,EAAD,CACElF,YAAY,QACZF,KAAK,OACLC,MAAOqE,EACPnE,SAAU,SAACC,GAAD,OAAKmE,EAASnE,EAAEC,OAAOJ,UAEnC,kBAACmF,EAAA,EAAD,CACElF,YAAY,WACZF,KAAK,OACLC,MAAOuE,EACPrE,SAAU,SAACC,GAAD,OAAKqE,EAAYrE,EAAEC,OAAOJ,UAEtC,kBAACsB,EAAA,EAAD,CAAQvB,KAAK,SAASO,QAxEnB,SAACC,GACZA,EAAMC,iBACNpC,EAAKmH,2BAA2BlB,EAAME,GACrCe,OAAM,SAACvD,GAAD,OAASG,MAAMH,EAAMI,YAC5BwC,GAAc,KAoEN,cAKN,yBAAKhF,UAAU,cACb,yBACEA,UAAU,kBACVG,IAAI,2FACJD,IAAI,KAGLrB,EACC,kBAAC8C,EAAA,EAAD,CAAQhB,QAAS,kBAAIlC,EAAKoH,YAA1B,UAEA,yBAAK7F,UAAU,sBACb,kBAAC2B,EAAA,EAAD,CAAQhB,QAAS,kBAAIqE,GAAc,KAAnC,WACA,kBAACrD,EAAA,EAAD,CAAQhB,QAAS,kBAAI6D,GAAQ,KAA7B,aAKN,yBAAKxE,UAAU,aACb,yBAAKA,UAAU,iBACZqE,EAAMxE,KAAI,gBAAEsF,EAAF,EAAEA,GAAGC,EAAL,EAAKA,KAAL,OACT,kBAAC,EAAD,CAAMU,IAAKX,EAAIvG,OAAQuG,EAAItG,KAAMA,EAAMC,SAAUsG,EAAKtG,SAAUC,QAASqG,EAAKrG,QAASC,SAAUoG,EAAKpG,eAGnG,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMkC,aACL,kBAAC,EAAD,CAAajC,SAAUD,EAAKkC,cAE5B,mEAGJ,yBAAKf,UAAU,kBACb,kBAAC,IAAD,CACE4C,IAAI,8BACJmD,SAAU,IACVC,aAAa,EACbC,iBAAiB,MACjBC,SAAS,GACTC,cAAY,EACZC,UAAW,aACXC,UAAW,aACXC,cAAe,aACfC,UAAW,mBChMHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzE,MAAK,SAAA0E,GACJA,EAAaC,gBAEd3B,OAAM,SAAAvD,GACLC,QAAQD,MAAMA,EAAMI,c","file":"static/js/main.909a8ec0.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseApp=firebase.initializeApp({\r\n    apiKey: \"AIzaSyDeFcxHsLwxLcDuL09AB-5wt3joaZGLrYI\",\r\n    authDomain: \"instagram-clone-react-303c4.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-clone-react-303c4.firebaseio.com\",\r\n    projectId: \"instagram-clone-react-303c4\",\r\n    storageBucket: \"instagram-clone-react-303c4.appspot.com\",\r\n    messagingSenderId: \"938864344539\",\r\n    appId: \"1:938864344539:web:b1c0a1e88099fe7caffbfe\",\r\n    measurementId: \"G-HPF6C70W09\"\r\n});\r\n\r\nconst db=firebase.firestore();\r\nconst auth=firebase.auth();\r\nconst storage=firebase.storage();\r\n\r\nexport {db,auth,storage};\r\n//way to set up firebase","import React,{ useState,useEffect } from 'react';\r\nimport './Post.css';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from '../firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Post({postId,user,username,caption,imageUrl}) {\r\n    const [comments,setComments]=useState([]);\r\n    const[comment,setComment]=useState();\r\n\r\n    useEffect(()=>{\r\n        let unsubscribe;\r\n        if(postId){\r\n            const unsubscribe=db\r\n                .collection(\"posts\")\r\n                .doc(postId)\r\n                .collection(\"comments\")\r\n                .orderBy('timestamp','desc')\r\n                .onSnapshot((snapshot)=>{\r\n                    setComments(snapshot.docs.map((doc)=>doc.data()));\r\n                });\r\n        }\r\n\r\n        return()=>{\r\n            unsubscribe();\r\n        };\r\n    },[postId]);\r\n\r\n    const postComment=(event)=>{\r\n        event.preventDefault();\r\n        db.collection('posts').doc(postId).collection('comments').add({\r\n            comments:comment,\r\n            username:user.displayName,\r\n            timestamp:firebase.firestore.FieldValue.serverTimestamp()\r\n        });\r\n        setComment('');\r\n    }\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post_header\">\r\n                {/* header->avatar and username */}\r\n                <Avatar\r\n                    className=\"post_avatar\"\r\n                    alt=\"RohanKacheria\"\r\n                    src=\"/static/images/avatar/1.jpg\"\r\n                />\r\n                <h3>{username}</h3>\r\n            </div>\r\n\r\n            {/* image */}\r\n            <img className=\"post_image\" src={imageUrl} alt=\"\" />\r\n            {/* username + caption */}\r\n            <h4 className=\"post_text\"><strong>{username} </strong>{caption}</h4>\r\n\r\n            <div className=\"post_comments\">\r\n                {comments.map((comment)=>(\r\n                    <p>\r\n                        <strong>{comment.username}</strong> {comment.comments}\r\n                    </p>\r\n                ))}\r\n            </div>\r\n            {user && (\r\n                <form className=\"post_commentBox\">\r\n                    <input\r\n                        className=\"post_input\"\r\n                        type=\"text\"\r\n                        value={comment}\r\n                        placeholder=\"Add a comment...\"\r\n                        onChange={(e)=>setComment(e.target.value)}\r\n                    />\r\n                    <button \r\n                        className=\"post_button\" \r\n                        disabled={!comment} \r\n                        type=\"submit\" \r\n                        onClick={postComment}\r\n                    >\r\n                        Post\r\n                    </button>\r\n                </form>\r\n            )}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n\r\n\r\n//how a post is displayed","import { Button } from '@material-ui/core';\r\nimport React,{ useState } from 'react';\r\nimport { storage,db } from './firebase';\r\nimport firebase from \"firebase\";\r\nimport './ImageUpload.css';\r\n\r\nfunction ImageUpload({username}) {\r\n    const [image,setImage]=useState(null);\r\n    const [progress,setProgress]=useState(0);\r\n    const [caption,setCaption]=useState('');\r\n\r\n    const handleChange=(e)=>{\r\n        if(e.target.files[0]){\r\n            setImage(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const handleUpload=()=>{\r\n        const uploadTask=storage.ref(`images/${image.name}`).put(image);// putting images you selected into that folder\r\n        uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot)=>{\r\n                //progress function ...\r\n                const progress=Math.round(\r\n                    (snapshot.bytesTransferred/snapshot.totalBytes)*100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            (error)=>{\r\n                //Error function ...\r\n                console.log(error);\r\n                alert(error.message);\r\n            },\r\n            ()=>{\r\n                //complete function...\r\n                //storage go to ref images and go to image name and get me the download image url\r\n                storage\r\n                    .ref(\"images\")\r\n                    .child(image.name)\r\n                    .getDownloadURL()\r\n                    .then(url=>{\r\n                        //post image in db\r\n                        db.collection('posts').add({\r\n                            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n                            caption:caption,\r\n                            imageUrl:url,\r\n                            username:username\r\n                        });\r\n\r\n                        //setting it back to default values\r\n                        setProgress(0);\r\n                        setCaption(\"\");\r\n                        setImage(null);\r\n                    });\r\n            }\r\n        );\r\n    };\r\n    \r\n    return (\r\n        <div className=\"imageupload\">\r\n            <progress className=\"imageupload_progress\" value={progress} max=\"100\" />\r\n            <input type=\"text\" placeholder=\"Enter a caption...\" onChange={event=>setCaption(event.target.value)} value={caption} />\r\n            <input type=\"file\" onChange={handleChange} />\r\n            <Button onClick={handleUpload}>Upload</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React,{ useState,useEffect } from 'react';\nimport './App.css';\nimport Post from './components/Post';\nimport {db,auth} from './firebase';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport { Button, Input } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\nimport InstagramEmbed from 'react-instagram-embed';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes=useStyles();\n  const [modalStyle]=React.useState(getModalStyle);\n  const [posts,setPosts]=useState([]);\n  const [open,setOpen]=useState(false);\n  const [username,setUsername]=useState('');\n  const [email,setEmail]=useState('');\n  const [password,setPassword]=useState('');\n  const [user,setUser]=useState(null);\n  const [openSignin,setOpenSignIn]=useState(false);\n\n  useEffect(()=>{\n    const unsubscribe= auth.onAuthStateChanged((authUser)=>{\n      if(authUser){\n        //user has logged in\n        console.log(authUser);\n        setUser(authUser);\n      }else{\n        //user has logged out\n        setUser(null);\n      }\n    })\n    return ()=>{\n      //perform some cleanup actions before\n      //detatche listener before you refire so we dont have repetitive \n      unsubscribe();\n    }\n  },[user,username]);\n\n  useEffect(()=>{\n    //this is where code runs for useeffect\n    //onsnapshot is a listener\n    db.collection('posts').orderBy('timestamp','desc').onSnapshot(snapshot=>{\n      setPosts(snapshot.docs.map(doc=>({\n        id:doc.id,\n        post:doc.data()})));\n    })\n  },[]);//runs every time the post changes if you do [posts] otherwise code runs once\n\n  const signUp=(event)=>{\n    event.preventDefault();\n    auth.createUserWithEmailAndPassword(email,password)\n    .then((authUser)=>{\n      return authUser.user.updateProfile({\n        displayName:username\n      })\n    })\n    .catch((error)=>alert(error.message));\n    setOpen(false);//to shut the modal once you sign up\n  }\n\n  const signIn=(event)=>{\n    event.preventDefault();\n    auth.signInWithEmailAndPassword(email,password)\n    .catch((error)=>alert(error.message));\n    setOpenSignIn(false);//to shut the modal once you sign in\n  }\n\n  return (\n    <div className=\"app\">\n      <Modal\n        open={open}\n        onClose={()=>setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app_signup\">\n            <center>\n              <img \n                className=\"app_headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e)=>setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e)=>setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"text\"\n              value={password}\n              onChange={(e)=>setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal\n        open={openSignin}\n        onClose={()=>setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app_signup\">\n            <center>\n              <img \n                className=\"app_headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e)=>setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"text\"\n              value={password}\n              onChange={(e)=>setPassword(e.target.value)}\n            />\n            <Button type=\"submit\" onClick={signIn}>Sign In</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app_header\">\n        <img \n          className=\"app_headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo-2x.png/1b47f9d0e595.png\"\n          alt=\"\"\n        />\n\n        {user?(\n          <Button onClick={()=>auth.signOut()}>Logout</Button>\n        ):(\n          <div className=\"app_loginContainer\">\n            <Button onClick={()=>setOpenSignIn(true)}>Sign in</Button>\n            <Button onClick={()=>setOpen(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app_posts\">\n        <div className=\"app_postsLeft\">\n          {posts.map(({id,post})=>(\n            <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} />\n          ))}\n\n          {user?.displayName?(\n            <ImageUpload username={user.displayName} />\n          ):(\n            <h3>Sorry,You need to log in to upload</h3>\n          )}\n        </div>\n        <div className=\"app_postsRight\">\n          <InstagramEmbed\n            url='https://instagr.am/p/Zw9o4/'\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName='div'\n            protocol=''\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n        \n      </div>\n      \n      \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}